
연산자
- 항과 연산자

10 + 20 = 30

항 : 10, 20 - 연산에 사용된 값 
연산자 : +, =  : 연산에 사용되는 기호

단항 : 연산에 사용된 값 1, 증가 감소연산, 복합 대입 연상
이항 : 연산에 사용되는 값 2개 
삼항 조건 연산 

조건식 ? 참일떄 : 거짓일때 

1. 대입 연산자 
	- = 
	1) 오른쪽 연결 결과를 왼쪽 변수에 저장 (대입)
	2) 우선순위가 가장 낮은 연산자  
	
2. 부호 연산자			
	1) +, -
	2) - : 부호 반전 
		음수 -> 양수, 양수 -> 음수
		num = -num;  -> num = num * -1; 
	
3. 산술 연산자
	+, -, *, /,  %
	
	1) + : 수치 - 값의 연산 
			문자열 - 문자열 결합 
			
	2) *, /, %가 +, - 보다 연산자의 우선순위가 높다
	3) 산술 연산에서 연산자의 우선순위를 강제로 높이는 경우 (...) 
	4) % : 나머지 연산자, 나누는 수보다 작은 수가 나머지로 나오고 이 나머지는 계속 반복되는 패턴(규칙성 - 균등 배분..)
	
	참고) 
		문자열 : 문자 여러개
		String, 값은 "....";
	
4. 증가감소 연산자	
	1씩 증가(++) 
		num++;
		
		int num = 10;
		int num2 = num++;     : 1) = (대입) -> 2) ++    결과) num2 = 10, num = 11
		
		++num;
		
		int num = 10;
		int num2 = ++num;  : 1) ++  -> 2) = (대입),    결과 num = 11, num2 = 11
		
	1씩 감소(--) 
	
	num++   // num = num + 1;  의 단축 문법
	num = num + 1;  
	
5. 관계(비교) 연산자
	1) 연산의 결과는 논리값(boolean)
	2) 조건식, 반복문에서 자주 사용
	3) >, <, >=, <=, ==, != 

	== : 동일성 비교, 주소의 비교
	
	 equals, hashcode 메서드 : 동등성 비교, 가치 판단이 필요한 비교
	
	4) 연산에 필요한 값은 숫자!
	
	
	참고)
		조건식 : 참거짓을 판별하는 연산식
		
6. 논리 연산자
	1) AND 연산 (&&), OR 연산( || ), NOT 연산 (!) 
	2) 연산에 필요한 값은 논리값!(true, false), 논리 연산의 값 위치에 비교 연산을 함께 쓴다.
	3) 단락회로 평가 
	4) 비교 연산이 논리 연산보다 연산의 우선순위가 높다! 
	
7. 복합 대입 연산자
	대입 연산자와 다른 연산자의 결합 ( 산술연산, 비트 연산 ...) 
	
	1) 2 씩 증가 
	num = num + 2;  -> num += 2;
	
	2) 2씩 곱하기 
	num = num * 2; -> num *= 2;
	
8. 조건 연산자(삼항조건연산자)
	조건식 ? 참일때 : 거짓일때 
	  1항       2항        3항
	
9. 연산자 우선순위
= (대입) <      ...      논리 < 비교      ...           < (...), [..] 


제어문 
if (조건식1) {
	
} else if(조건식2) {
	조건식1이 거짓이고, 조건식2가 참
}


선택문 

switch(키워드) {
	case 키워드1: 
		실행 코드 
	case 키워드2:
		실행 코드
		break;   // 실행 종료
	...
	default: 
		모든 키워드에 매칭되지 않은 경우 실행 코드
}

참고)
	키워드의 값은 무조건 정수! int, char

반복문
while(조건식) {
	// 조건식이 참일때 반복되는 코드 
}

do {
	조건식이 참일때 반복 실행되는 코드 
	조건이 참이 아니더라도 한번은 실행된다!
	
} while(조건식);

반복에 횟수를 제한할때 필수 요소
1) 초기값, 
2) 증가감소식 
3) 조건식


for (초기화식; 조건식; 증가감소식) {

} 

for (int num = 1; num <= 100; num++) {
							// 반복 수행 (100번) 
}

index : 순서(0부터 시작하는 순서) 

관례적으로 index의 첫번째 문자인 i를 변수로 사용, 다음 변수는 알파벳 순서대로, i, j, k, l, m ....

for (int i = 1; i <= 100; i++) {
	
}

break : 반복을 멈출때 
continue : 현재 반복을 종료하고 다음 반복을 시작(반복 건너뛰기) 

중첩된 반복문 
	반복문 안에 반복문 정의 된 경우
	
참고)
	System.out
		println(...) : 값의 출력, \n 함께 출력 (출력하고 다음줄로 개행)  
		print(...): 값의 출력(다음줄로 개행 X) 
		printf(...) : f -> format : 형식화
				형식 문자 
					%s : 문자열 치환
					%c : 문자 1개 치환 
					%d : 정수
					%f : 실수
					%n : \n 동일, 줄개행
		
		
	메타 문자 : 키보드의 특정 키의 기능과 관련된 문자 
	엔터키 -> 윈도우즈 기준 \r\n  - \r : 캐리지 리턴, 커서를 가장 앞쪽으로 이동, \n: new line : 다음줄로 개행
			  -> 리눅스, 맥  \n 
			  
	\n : 다음줄로 개행
	\t : 탭키를 1번 누른것
	\s : 스페이바를 1번 누른것, 공백 1개
	\b : 백스페이스키를 한번 누른것
	
	
exam01.ex04번 참고	
1. 변수 두 개를 선언해서 20과 3.0을 대입하고 두 변수의 사칙연산 결과를 정수로 출력해 보시오

2. 학생 40명이 리조트에 수학여행을 갔습니다. 리조트로 수학여행을 갔습니다. 리조트는 방이 10개 있고 방번호는 0~9번까지 있습니다, 40명의 학생이 각각 번호표를 받아 한 방에 4명씩 배정하여 다음과 같이 출력하시오(예 : 학생1, 방번호 1번)

3. 5층 건물이 있습니다. 1층 약국, 2층 정형외과, 3층 피부과, 4층 치과, 5층 헬스클럽입니다. 건물의 층을 누르면 그 층이 어떤 곳인지 알려주는 엘리베이터가 있을 때 이를 swich ~ case문으로 구현하시오(5층인 경우 ‘5층 헬스클럽입니다.’)

4. 구구단을 홀수 단만 출력하도록 프로그램을 만드시오. 

5. 구구단을 단보다 곱하는 수가 크거나 같은 경우만 출력하는 프로그램을 만들어 보세요.


배열
1. 배열이란?
- 같은 자료형(공간의 크기가 동일)
- 물리적인 나열 구조(순차 자료 구조)
- 


2.  배열 선언과 초기화
	자료형[] 배열명 = new 자료형[공간의 갯수];
	자료형 배열명[] = new 자료형[공간의 갯수];
	
	
	참고)
		new 연산자
		
	
3.  배열 사용하기
	- 인덱스 연산자
			[] : 배열 공간의 위치를 계산해 주는 연산자
					
			참고)
				인덱스 : 0부터 시작하는 순서 
	
	- 선언과 동시에 초기화 
	자료형[] 배열명 = new 자료형[] { 값1, 값2, 값3 ....};
	자료형[] 배열명 = { 값1, 값2, 값3 .... };
	
참고)
	기본 자료형 : 초기값 
		정수형 자료형(byte, short, int, long) -> 0
		실수형 자료형(float, double) -> 0.0
		논리형 자료형(boolean) -> false
	
	참조 자료형 
		예) String - 초기값 null 

	
4. 전체 배열 길이와 유효한 값
	모든 배열 
		length : 공간의 갯수 
		
5. 향상된 for문과 배열

// nums 배열의 값을 num이라는 변수에 하나씩 담아서 반복 (처음부터 끝까지..)

for (int num : nums) {

}

6. 다차원배열
1차원 배열 
int[] nums = new int[4];
int[][] nums = new int[행][열]
 