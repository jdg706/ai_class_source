자바스크립트
1. 실습방법 안내
- 브라우저 - 콘솔
	- 렌더링 엔진 + 자바스크립트 해석 엔진(V8)
- SHIFT + 엔터 -> 줄 개행

자바스크립트 기초 문법
1. 자바스크립트 사용하는 방법
- HTML 문서에서 사용하는 방법
- script 태그 정의된 자바스크립코드 해석

1) script 태그 안에 정의하는 방식
<script>
    자바스크립트 코드...
</script>

2) HTML 태그의 이벤트 처리기 속성
    on이벤트명="자바스크립트 코드 ...."

3) 외부 스크립트 파일로 사용하는 방법
<script src="js 파일 경로"></script>

2. 자바스크립트 주석 처리
    1) 소스에 대한 설명
    2) 코드의 실행 방지

    - 스크렙트 해석 엔진이 수석으로 작성된 코드를 해석하지 않으므로 설명이나, 소스 배제 용도로 사용 가능

        //  한중 설명...

        /*  여러줄 설명...
            여러줄 설명... 
        */

        설명을 목적으로 하는 주석
        /**
        * 소스에 대한 자세한 설명
        *
        *
        *
        */

3. 변수

1) 정의
    값을 담을 수 있는 공간(메모리)의 이름
    공간의 크기가 용도에 따라서 다양하다.
    공간마다 주소가 할당 되어 있다.

2) 변수선언
    변수를 사용하겠다라고 정의하는 방법
    var 변수명; - 변수 선언, 공간을 할당 받음(메모리), var(variable)
    변수를 사용하는 경우 = 대입 연산자; (var 변수명 = 값;)
        - 오른쪽에 있는 값을 할당된 변수명으로 되어 있는 변수에 저장(대입)
        - 할당된 변수에 최초에 값을 저장하는 것을 초기화라고 한다.
    선언과 동시에 초기화를 하는게 일반적

3) 선언자 종류
    var, let, const

4) 선언 방법

5) 변수 선언 생략

6) 변수 끌어올림과 변수 중복 선언

7) 변수의 명명규칙
    필수)알파벳(대소문자), 숫자, 특수문자 _, $ 만 사용가능
	    - 한글도 사용 가능 - 권장 X
    필수)숫자는 변수명 가장 앞에 올수 없다.
    필수)예약어는 쓸 수 없다.
        - if, for, return ... 등
    관례)변수명은 의미있는 단어 작성
        - 변수가 어디게 사용하는지 확인하기 쉽게 하기 위해서
    관례)변수명을 짖는 관례
        - 단어의 첫 시작문자를 대문자, 다만 첫번째 단어만 소문자(낙타 표기 - Camel Case)
            예) var numberOfStudent;
        참고) 파이썬 - number_of_student(snake Case)

8) 변수에 저장할 수 있는 자료형
    참고) typeof : 자료형을 체크해 보는 연산자

    자료형 : 값의 형태, 형식
        - 변수의 담을 수 있는 값: 자료

    자바스크립트는 동적 타입 언어
        - 변수에 할당되는 값의 자료형을 알아서 판단하고 결정

    문자형(string) : "또는 '로 값을 감싸면 문자형
	    - var str = 'ABC';
	    - var str = "ABC";

    숫자형(number)
        - 정수(소수점이 없는 수  - 양수(1,10), 음수(-1, -10), 0)
	    - 실수(소수점이 있는 수 - 3.123, 0.0)

    논리형(boolean)
	    - true (참), false (거짓)
            - 제어문(if), 반복문(for)에서 자주 활용

    null : 값이 없는 상태(값)

    undefined : 값이 정해지지 않은 상태 (변수를 선언만 한 경우)

4. 연산자
    1) 용어
        - 항 : 연산에 사용되는 값
            * 연산에 사용되는 값이 1개 -> 단항
            * 연산에 사용되는 값이 2개 -> 이항
            * 연산에 사용되는 값이 3개 -> 삼항(조건 연산)
                - 조건식 : 참거짓을 판별하는 연산식

        - 연산자 : 연산에 사용되는 기호
            * 산술 연산자 (+, -, /, *, ...)
            * 대입 연산자 - 대입연산자는 연산의 우선순위가 낮다
            * 증가, 감소 연산자(단항 연산) 예) a++;, a--;, ++a;, --a;
            * 복합대입 연산자(단항 연산)
                - 대입 연산자(=) + 다른 연산자의 결합(산술 연산이 가장 많다.)
                예) a = a + 2; -> a += 2;
            * 부호 연산자(단항 연산)
                - 부호 반전(음수 -> 양수, 양수 -> 음수)

        < 논리 연산은 비교 연산보다 우선순위가 낮다 >
            * 비교 연산자
                - 연산의 결과는 논리값이 나온다(true, false)
                    참고) 조건식 : 참과 거짓을 판별하는 연산식
                - 참, 거짓 판별이 필요한 구문에서 주로 사용(제어문, 반복문)
                - <, >, <=, >=
                - == 같다 : 값의 비교(동등성 비교, 가치판단에 따라 동등성을 비교)
                - === 같다 : 값의 주소 비교(동일성 비교)
                - != 다르다(값의 비교)
                - !== 다르다(값의 주소 비교)
            * 논리 연산자
                - 연산의 결과는 논리값(ture, false)
                - 참, 거짓 판별이 필요한 구문에서 주로 사용(제어문, 반복문)
                - AND 연산 : &&
                    - 비교하는 모든 항이 참이어야 참이 성립되는 연산
                - OR 연산 : ||
                    - 비교하는 항이 하나라도 참이면 참이 성립되는 연산
                - NOT : !
                    - ture -> false
                    - false -> ture
                - 단락 회로 평가
                    - 이미 참거짓이 명확한 경우 더 이상 다른 항의 연산을 하지 않음
                - 값을 가지고 참 거짓 판별 가능
                    - false로 인식할 수 있는 값
                    - true로 인식하는 값을 제외한 모든 값
                - && 연산과 당락회로 평가를 간단한 조건식으로 대체
                - || 연산은 기본값을 설덩할때 단락 회로 평가를 응용
                    - 문제점, 숫자 0은 항상 다른 값으로 대체가 되므로 사용이 불가
                        -> nullish 연산자
            * 삼항 조건 연산자
                - 조건식 ? 참일때 : 거짓일때;
                    1항     2항       3항
            # 연산자의 우선순위
            = 대입연산자 < ...... < 논리연산자 < 비교연산자 < ... < (...)

5. 제어문
    -제어문
    if 조건문

        if (조건식) {
		// 참일때 실행될 코드 정의 영역 ...
	} else {
		// 거짓을때 실행될 코드 정의 영역...
	}
	
	
	if (조건식1) {
		// 조건식1이 참일때 실행되는 코드 
	} else if (조건식2) {
		// 조건식1은 거짓!
		// 조건식2가 참일때 실행되는 코드
		
	} else if(조건식3) {
		// 조건식1, 조건식2는 거짓!
		// 조건식3이 참일때 실행되는 코드...
	}
	.... 
	else {
		// 모든 조건이 거짓일때 실행되는 코드...
	}
        
6. 선택문
    switch ~ case 문

    switch(변수) {
        case 키원드1:
        // 변수가 키워드 1과 일치하는 경우 실행되는 코드
        break;  // 실행 흐름 종료

        case 키원드2:
        // 변수가 키워드 2과 일치하는 경우 실행되는 코드

        default:
        // 모든 키워드에 매칭이 되지 않을 때 실행되는 코드
    }

7. 반복문
    1) while

        while(조건식){

            // 조건식이 참일때 반복 실행되는 코드

        }

        // 반복 횟수가 정해진 반복은 초기값, 조건식, 증감식이 필수 구성 요소
        // 조건식에 ture -> 무한 반복

    2) do ~ while

        do {

            // 조건식이 참일때 반복 수행되는 코드
            // 조건식이 거짓이더라도 한번은 반드시 실행

        }while(조건식);

    3)for
        - 반복 횟수가 정해진 반복문에서 자주 사용
        - 반복 순서가 정해진 반복문
            관례) 순서 - index => 관례적으로 초기화식 변수명으로 i를 사용한다.
            관례) 다음 변수는 i 다음 알파벳 순서대로 정한다.(i -> j -> k -> l -> ...)

        for(초기화식; 조건식; 증감식) {

            // 조건식이 참 일때 반복 수행되는 코드

        }

    * 모든 반복문에서 사용 가능항 예약어
        - break : 반복 종료
        - continue : 현재 반복을 종료하고 다음 반복문을 시작 (현재 반복을 건너띈다.)


객체(Object)
    - 특징 : 변수
    - 행위 : 함수

1. 객체 리터럴
- 객체는 이름과 값을 한쌍을 묶은 데이터를 여러개 모은 것
    - 이름 : 속성명
    - 값 : 속성값
- 객체는 데이터 여러개를 하나로 모은 복합 데이터로 연관배열 또는 사전(Diction) 이라고 부릅니다.

2. 객체 리터럴로 객체 생성하기
    {
        속성명: 값,
        속성명: 값,
        ...
    }

var person = {
    name: '김이름',
    age: 20,
};

    1> 마치표 연산자(.)
        - person.name;
        - person.age;
            * 속성명은 변수명 규칙에 영향을 받는다.
            * 변수명에 규칙에 위배되는 속성명은 접근 불가

    2> 인덱스 연산자[]
        - person['name'];
        - person['age'];
            * 변수명 규칙과 상광없이 접근이 가능

    데이터들을 가지고 주로 하는 작업
        - CRUD
             C = Create : 데이터 생성
             R = Read : 데이터 조회
             U = Update : 데이터 수정
             D = Delete : 데이터 삭제

3. 프로퍼티(속성) 추가와 삭제
    추가 : 없는 속성에 값을 대입하면 새로운 속성이 추가
    삭제 : delete 변수명. 속성명;

    // 주소를 가지고 자원 접근하는 변수 -> 참조 변수

4. in 연산자로 프로퍼티가 있는지 확인하기
    속성명이 객체에 존재하는지 체크하는 연산자로
    (논리값)
    'name' in person: person이 참조하는 객체에 'name' 속성명이 있는지 체크

5. 메서드
6. 객체는 참조 타입

함수
- 일련의 처리를 하나로 모아 언제든 호출할 수 있도록 만들어 놓은것
- 기능


1. 함수 선언문으로 함수 정의하기
2. 함수 호출			
3. 함수의 실행흐름
4. 함수 선언문의 끌어올림
5. 값으로서의 함수
6. 참조에 의한 호출과 값에 의한 호출

변수의 유효범위
1. 전역 유효 범위와 지역 유효범위
2. 변수의 충돌
3. 함수 안에서 변수 선언과 변수 끌어올림
4. 함수 안에서 변수 선언 생략
5. 블록 유효 범위 : let과 const
6. 함수 리터럴로 함수 정의하기
7. 객체의 메서드
8. 즉시 실행 함수
9. 가변길이 인수 목록(Arguments 객체)

생성자